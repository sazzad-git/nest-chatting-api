// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER // সাধারণ ব্যবহারকারী
  ADMIN // অ্যাডমিনিস্ট্রেটর
}

model User {
  id            String               @id @default(cuid()) // User ID হিসেবে CUID
  username      String               @unique
  email         String               @unique
  password      String // হ্যাশ করা পাসওয়ার্ড এখানে সেভ হবে
  refreshToken  String? // রিফ্রেশ টোকেন সেভ করার জন্য
  roles         Role[]               @default([USER])
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  //relations
  conversations UserInConversation[]
  messages      Message[]
  adminOfGroups Conversation[]       @relation("GroupAdmin")
  readMessages  Message[]            @relation("ReadMessages")
}

model Conversation {
  id        String   @id @default(cuid())
  name      String? // গ্রুপ চ্যাটের জন্য নাম
  isGroup   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  participants UserInConversation[]
  messages     Message[]

  // গ্রুপ চ্যাটের অ্যাডমিন (ঐচ্ছিক)
  adminId String?
  admin   User?   @relation("GroupAdmin", fields: [adminId], references: [id], onDelete: SetNull)
}

// User এবং Conversation এর মধ্যে Many-to-Many সম্পর্কের জন্য Join Table
model UserInConversation {
  userId         String
  conversationId String

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId]) // Composite primary key
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  // Relations
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  readBy         User[]       @relation("ReadMessages")
}
